Index: compiler/nflw.pas
===================================================================
--- compiler/nflw.pas	(revision 36446)
+++ compiler/nflw.pas	(working copy)
@@ -2397,6 +2397,9 @@
           nested procvars modeswitch is active. We must be independent of this switch. }
         exclude(result.procoptions,po_delphi_nested_cc);
         result.proctypeoption:=potype_exceptfilter;
+        { Also be independent of -CCxxx switch. }
+        result.proccalloption:=pocall_default;
+        include(result.procoptions,po_hascallingconvention);
         handle_calling_convention(result);
         sym:=cprocsym.create('$fin$'+tostr(seq));
         st.insert(sym);
Index: packages/fcl-db/src/memds/memds.pp
===================================================================
--- packages/fcl-db/src/memds/memds.pp	(revision 36446)
+++ packages/fcl-db/src/memds/memds.pp	(working copy)
@@ -1217,6 +1217,10 @@
   i: integer;
   AField: TField;
   s1,s2: string;
+  {$ifdef WINDOWS}
+  UseUTF8:Boolean;
+  keyValuesType:array of tvartype;
+  {$endif}
 begin
   Result := false;
   SaveState := SetTempState(dsFilter);
@@ -1228,11 +1232,23 @@
       begin
       Matched := lstKeyFields.Count = 1;
       AKeyValues := VarArrayOf([KeyValues]);
+      {$ifdef WINDOWS}
+      SetLength(keyValuesType,1);
+      keyValuesType[0]:=VarType(KeyValues);
+      {$endif}
       end
     else if VarArrayDimCount(KeyValues) = 1 then
       begin
       Matched := VarArrayHighBound(KeyValues,1) + 1 = lstKeyFields.Count;
       AKeyValues := KeyValues;
+      {$ifdef WINDOWS}
+      if Matched then
+        begin
+          SetLength(keyValuesType,VarArrayHighBound(KeyValues,1) + 1);
+          for i:=0 to VarArrayHighBound(KeyValues,1) do
+            keyValuesType[i]:=VarType(KeyValues[i]);
+        end;
+      {$endif}
       end
     else
       Matched := false;
@@ -1255,12 +1271,25 @@
           // string fields
           if AField.DataType in [ftString, ftFixedChar] then
           begin
+            {$ifdef WINDOWS}
+            UseUTF8:=keyValuesType[i]<>varstring;
+            {$endif}
             s1 := AField.AsString;
+            {$ifdef WINDOWS}
+            if UseUTF8 then
+               s2:=pchar(UTF8Encode(VarToUnicodeStr(AKeyValues[i])))
+               else
+            {$endif}
             s2 := VarToStr(AKeyValues[i]);
             if loPartialKey in Options then
               s1 := copy(s1, 1, length(s2));
             if loCaseInsensitive in Options then
-              Result := AnsiCompareText(s1, s2)=0
+            {$ifdef WINDOWS}
+              if UseUTF8 then
+              Result := CompareText(s1, s2)=0
+                else
+            {$endif}
+                  Result:=AnsiCompareText(s1, s2)=0
             else
               Result := s1=s2;
           end
@@ -1277,6 +1306,9 @@
   finally
     lstKeyFields.Free;
     RestoreState(SaveState);
+    {$ifdef WINDOWS}
+    SetLength(keyValuesType,0);
+    {$endif}
   end;
 end;
 
Index: packages/fcl-process/src/process.pp
===================================================================
--- packages/fcl-process/src/process.pp	(revision 36446)
+++ packages/fcl-process/src/process.pp	(working copy)
@@ -35,7 +35,7 @@
   TStartupOption = (suoUseShowWindow,suoUseSize,suoUsePosition,
                     suoUseCountChars,suoUseFillAttribute);
 
-  TProcessPriority = (ppHigh,ppIdle,ppNormal,ppRealTime);
+  TProcessPriority = (ppHigh,ppIdle,ppNormal,ppRealTime,ppBelowNormal,ppAboveNormal);
 
   TProcessOptions = set of TProcessOption;
   TStartupOptions = set of TStartupOption;
Index: packages/fcl-process/src/unix/process.inc
===================================================================
--- packages/fcl-process/src/unix/process.inc	(revision 36446)
+++ packages/fcl-process/src/unix/process.inc	(working copy)
@@ -27,7 +27,7 @@
 
 Const
   PriorityConstants : Array [TProcessPriority] of Integer =
-                      (20,20,0,-20);
+                      (-10,19,0,-20,5,-5);
 
 Const
   GeometryOption : String = '-geometry';
Index: packages/fcl-process/src/win/process.inc
===================================================================
--- packages/fcl-process/src/win/process.inc	(revision 36446)
+++ packages/fcl-process/src/win/process.inc	(working copy)
@@ -25,7 +25,8 @@
 Const
   PriorityConstants : Array [TProcessPriority] of Cardinal =
                       (HIGH_PRIORITY_CLASS,IDLE_PRIORITY_CLASS,
-                       NORMAL_PRIORITY_CLASS,REALTIME_PRIORITY_CLASS);
+                       NORMAL_PRIORITY_CLASS,REALTIME_PRIORITY_CLASS,
+                       BELOW_NORMAL_PRIORITY_CLASS,ABOVE_NORMAL_PRIORITY_CLASS);
 
 procedure TProcess.CloseProcessHandles;
 begin
Index: packages/fcl-process/src/wince/process.inc
===================================================================
--- packages/fcl-process/src/wince/process.inc	(revision 36446)
+++ packages/fcl-process/src/wince/process.inc	(working copy)
@@ -25,7 +25,8 @@
 Const
   PriorityConstants : Array [TProcessPriority] of Cardinal =
                       (HIGH_PRIORITY_CLASS,IDLE_PRIORITY_CLASS,
-                       NORMAL_PRIORITY_CLASS,REALTIME_PRIORITY_CLASS);
+                       NORMAL_PRIORITY_CLASS,REALTIME_PRIORITY_CLASS,
+                       BELOW_NORMAL_PRIORITY_CLASS,ABOVE_NORMAL_PRIORITY_CLASS);
 
 procedure TProcess.CloseProcessHandles;
 begin
Index: packages/fcl-registry/src/registry.pp
===================================================================
--- packages/fcl-registry/src/registry.pp	(revision 36446)
+++ packages/fcl-registry/src/registry.pp	(working copy)
@@ -31,7 +31,9 @@
     FileTime: TDateTime;
   end;
 
-  TRegDataType = (rdUnknown, rdString, rdExpandString, rdBinary, rdInteger);
+  TRegDataType = (rdUnknown, rdString, rdExpandString, rdBinary, rdInteger,
+                  rdIntegerBE, rdLink, rdMultiString, rdResourceList, rdResourceFullDesc,
+                  rdResourceReqList, rdQWord);
 
   TRegDataInfo = record
     RegData: TRegDataType;
Index: packages/fcl-registry/src/winreg.inc
===================================================================
--- packages/fcl-registry/src/winreg.inc	(revision 36446)
+++ packages/fcl-registry/src/winreg.inc	(working copy)
@@ -91,16 +91,20 @@
     Result:=-1
   else
     begin
-    If (RD=REG_SZ) then
-      RegData:=rdString
-    else if (RD=REG_EXPAND_SZ) then
-      Regdata:=rdExpandString
-    else if (RD=REG_DWORD) then
-      RegData:=rdInteger
-    else if (RD=REG_BINARY) then
-      RegData:=rdBinary
-    else
-      RegData:=rdUnknown;
+    case RD of
+      REG_SZ             : RegData:=rdString;
+      REG_EXPAND_SZ      : RegData:=rdExpandString;
+      REG_BINARY         : RegData:=rdBinary;
+      REG_DWORD          : RegData:=rdInteger;
+      REG_DWORD_BIG_ENDIAN : RegData:=rdIntegerBE; // Swap ?
+      REG_LINK           : RegData:=rdLink;
+      REG_MULTI_SZ       : RegData:=rdMultiString;
+      REG_RESOURCE_LIST  : RegData:=rdResourceList;
+      REG_FULL_RESOURCE_DESCRIPTOR : RegData:=rdResourceFullDesc;
+      REG_RESOURCE_REQUIREMENTS_LIST : RegData:=rdResourceReqList;
+      REG_QWORD          : RegData:=rdQWord;
+      else RegData:=rdUnknown;
+    end;
     Result:=BufSize;
     end;
 end;
@@ -382,7 +386,14 @@
     rdString       : RegDataType:=REG_SZ;
     rdExpandString : RegDataType:=REG_EXPAND_SZ;
     rdInteger      : RegDataType:=REG_DWORD;
+    rdIntegerBE    : RegDataType:=REG_DWORD_BIG_ENDIAN; // Swap ?
     rdBinary       : RegDataType:=REG_BINARY;
+    rdMultiString  : RegDataType:=REG_MULTI_SZ;
+    rdLink         : RegDataType:=REG_LINK;
+    rdQWord        : RegDataType:=REG_QWORD;
+    rdResourceList : RegDataType:=REG_RESOURCE_LIST;
+    rdResourceFullDesc : RegDataType:=REG_FULL_RESOURCE_DESCRIPTOR;
+    rdResourceReqList : RegDataType:=REG_RESOURCE_REQUIREMENTS_LIST;
   end;
   P:=PChar(Name);
   FLastError:=RegSetValueExA(fCurrentKey,P,0,RegDataType,Buffer,BufSize);
Index: packages/regexpr/src/regexpr.pas
===================================================================
--- packages/regexpr/src/regexpr.pas	(revision 36446)
+++ packages/regexpr/src/regexpr.pas	(working copy)
@@ -1240,6 +1240,10 @@
     Result := {$IFDEF FPC}AnsiUpperCase (Ch) [1]{$ELSE} {$IFDEF SYN_WIN32}REChar (CharUpper (PChar (Ch))){$ELSE}REChar (toupper (integer (Ch))){$ENDIF} {$ENDIF};
     if Result = Ch
      then Result := {$IFDEF FPC}AnsiLowerCase (Ch) [1]{$ELSE} {$IFDEF SYN_WIN32}REChar (CharLower (PChar (Ch))){$ELSE}REChar(tolower (integer (Ch))){$ENDIF} {$ENDIF};
+    {$IFNDEF UniCode}
+    if Result=#0 then
+      Result:=Ch;
+    {$ENDIF}
    end;
  end; { of function TRegExpr.InvertCaseFunction
 --------------------------------------------------------------}
Index: rtl/win/wininc/defines.inc
===================================================================
--- rtl/win/wininc/defines.inc	(revision 36446)
+++ rtl/win/wininc/defines.inc	(working copy)
@@ -660,6 +660,8 @@
      IDLE_PRIORITY_CLASS = 64;
      NORMAL_PRIORITY_CLASS = 32;
      REALTIME_PRIORITY_CLASS = 256;
+     BELOW_NORMAL_PRIORITY_CLASS = $00004000;
+     ABOVE_NORMAL_PRIORITY_CLASS = $00008000;
   { CreateService  }
      SERVICE_ALL_ACCESS = $f01ff;
      SERVICE_CHANGE_CONFIG = 2;
@@ -2402,6 +2404,7 @@
      REG_RESOURCE_LIST = 8;
      REG_RESOURCE_REQUIREMENTS_LIST = 10;
      REG_SZ = 1;
+     REG_QWORD = 11;
   { RegisterHotKey  }
      MOD_ALT = 1;
      MOD_CONTROL = 2;
